openapi: '3.0.0'
info:
  version: 1.0.0
  title: Bands REST API
servers:
  - url: '{server}'
    variables:
      server:
        default: "https://localhost:8080"
paths:
  /v1/bands:
    get:
      summary: Retrieve Bands
      description: Retrieve Bands.
      operationId: retrieveBands
      security:
        - oAuth2AuthCode:
            - email
            - profile
            - openid
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Band'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Band
      description: Create Band.
      operationId: createBand
      security:
        - oAuth2AuthCode:
            - email
            - profile
            - openid
      requestBody:
        description: Band creations params.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostBand'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Band'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/v1/bands/{band_id}':
    delete:
      summary: Delete Band
      description: Delete Band.
      operationId: deleteBand
      security:
        - oAuth2AuthCode:
            - email
            - profile
            - openid
      parameters:
        - in: path
          name: band_id
          description: Band identifier.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update Band
      description: Update Band.
      operationId: updateBand
      security:
        - oAuth2AuthCode:
            - email
            - profile
            - openid
      parameters:
        - in: path
          name: band_id
          description: Band identifier.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Band update params.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPatchBand'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Band'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/v1/bands/{band_id}/members':
    post:
      summary: Create Band Member
      description: Create Band Member.
      operationId: createBandMember
      security:
        - oAuth2AuthCode:
            - email
            - profile
            - openid
      parameters:
        - in: path
          name: band_id
          description: Band identifier.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Band Member creations params.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostBandMember'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Band'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/v1/bands/{band_id}/members/{member_id}':
    delete:
      summary: Delete Band Member
      description: Delete Band Member.
      operationId: deleteBandMember
      security:
        - oAuth2AuthCode:
            - email
            - profile
            - openid
      parameters:
        - in: path
          name: band_id
          description: Band identifier.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: member_id
          description: Band member identifier.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Band'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    oAuth2AuthCode:
      type: oauth2
      description: For more information, see https://developers.google.com/identity/protocols/OAuth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://www.googleapis.com/oauth2/v4/token
          scopes:
            email: >-
              This scope requests that your app be given access to

              1) the user's Google account email address. You access the email address
              by calling people.get, which returns the emails array (or by calling
              people.getOpenIdConnect, which returns the email property in
              OIDC-compliant format);


              2) the name of the Google Apps domain, if any, that the user belongs to.
              The domain name is returned as the domain property from people.get (or
              hd property from getOpenIdConnect).
            profile: >-
              This is the basic login scope. This scope does the following

              1) It requests that your app be given access to the authenticated user's
              basic profile information;

              2) It lets you know who the currently authenticated user is by letting
              you replace a Google+ user ID with 'me', which represents the
              authenticated user, in any call to the Google+ API;

              3) It lets your web app access over-the-air Android app installs.
            openid: >-
              This scope informs the authorization server that the client is making an
              OpenID Connect request, and requests access to the authenticated user’s
              ID. You must include this scope with the other OpenID Connect scopes.

              The getOpenIdConnect method returns the user's profile in OIDC-compliant
              format—use the following HTTP request path
              'https://www.googleapis.com/plus/v1/people/me/openIdConnect'
  schemas:
    Band:
      description: Band
      type: object
      properties:
        id:
          description: Band id
          type: string
          format: uuid
        name:
          description: Band name
          type: string
        creation:
          description: Band date creation
          type: string
          format: date
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        status:
          $ref: '#/components/schemas/BandStatus'
        created_at:
          description: Entry date creation
          type: string
          format: date
        updated_at:
          description: Entry date update
          type: string
          format: date

    BandStatus:
      description: Band BandStatus
      type: string
      enum:
        - BREAK_UP
        - HIATUS
        - ON_THE_ROAD

    Error:
      description: Error
      type: object
      properties:
        http_code:
          description: 'HTTP Code. ex:  400, 401, 404.'
          type: integer
        http_message:
          description: 'HTTP BandStatus Message. ex: Bad Request, Unauthorized, Not Found.'
          type: string
        description:
          description: Error description.
          type: string

    Member:
      description: Band Member
      type: object
      properties:
        id:
          description: Member id
          type: string
          format: uuid
        name:
          description: Member name
          type: string

    PatchDocument:
      description: A JSONPatch document as defined by RFC 6902
      type: object
      required:
        - "op"
        - "path"
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - "add"
            - "remove"
            - "replace"
            - "move"
            - "copy"
            - "test"
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.

    RequestPatchBand:
      description: Request Patch Band
      type: array
      items:
        $ref: "#/components/schemas/PatchDocument"

    RequestPostBand:
      description: Request Post Band
      type: object
      required:
        - "creation"
        - "name"
        - "status"
      properties:
        name:
          description: Band name
          type: string
        creation:
          description: Band date creation
          type: string
          format: date
        status:
          $ref: '#/components/schemas/BandStatus'

    RequestPostBandMember:
      description: Request Post Band Member
      type: object
      required:
        - "name"
      properties:
        name:
          description: Member name
          type: string
